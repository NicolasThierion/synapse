{"version":3,"file":"core.js","sourceRoot":"","sources":["../../../../src/core/core.ts"],"names":[],"mappings":";;;;AAIA,OAAO,qBAAqB,CAAC;AAC7B,OAAO,cAAc,CAAC;AAItB,OAAO,4BAA4B,CAAC;AAIpC,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,OAAO,sBAAsB,CAAC;AAC9B,OAAO,EAAE,aAAa,EAAE,MAAM,eAAe,CAAC;AAC9C,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAE,YAAY,EAAE,0BAA0B,EAAE,MAAM,gBAAgB,CAAC;AAM1E,gBAAiB,SAAQ,KAAK;;;;IAC5B,YAAY,CAAS;QACnB,KAAK,CAAC,CAAC,CAAC,CAAC;KACV;CACF;AAED,MAAM;;;;;IAOJ,MAAM,CAAC,IAAI,CAAC,IAAmB;QAC7B,EAAE,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,KAAK,CAAC,CAAC;YACd,MAAM,IAAI,UAAU,CAAC,6BAA6B,CAAC,CAAC;SACrD;QAED,IAAI,GAAG,YAAY,CAAC,IAAI,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC;QACjD,0BAA0B,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAE7C,MAAM,CAAC,eAAe,GAAG,IAAI,CAAC;KAC/B;;;;IAED,MAAM,CAAC,SAAS;QACd,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;YAC5B,MAAM,IAAI,UAAU,CAAC,yBAAyB,CAAC,CAAC;SACjD;QAED,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC;KAC/B;;;;IAED,MAAM,CAAC,QAAQ;QACb,MAAM,CAAC,eAAe,GAAG,SAAS,CAAC;KACpC;;qBA5B4B,UAAU,CAAC,KAAK,CAC3C,8GAA8G,CAAC;kBAEvF,OAAO,CAAC,MAAM,CACtC,2GAA2G,CAAC;;;;;;;AA2BhH,2HAAc,oBAAoB,CAAC;AACnC,uCAAc,gBAAgB,CAAC;AAE/B,8BAAc,eAAe,CAAC;AAG9B,8BAAc,wBAAwB,CAAC","sourcesContent":["// DO NOT REMOVE THIS ONE. AT the moment, it is needed for name resolution when generating .d.ts because of --declarations\nimport { ErrorObservable } from 'rxjs/observable/ErrorObservable';\n\n// TODO remove those ?\nimport 'core-js/es7/reflect';   // reflect api polyfill\nimport 'whatwg-fetch';          // Fetch API\n\n// TODO whatwg-url uses es6 that needs to be transpiled to es5. But  as of 2018/01/11, ngc refuses to process js when \"allowJs\" is set,\n// and complains because of bug https://github.com/angular/angular/issues/21080 So we need to use another polyfill.\nimport 'url-search-params-polyfill';            // UrlSearchParams\n\n// import 'whatwg-url';            // UrlSearchParams uncomment when bug above is resolved\n\nimport { Observable } from 'rxjs/Observable';\n\nimport '../utils/rxjs-import';\nimport { SynapseConfig } from './config.type';\nimport { assert } from '../utils/assert';\nimport { mergeConfigs, validateHttpBackendAdapter } from '../utils/utils';\n\ndeclare const global: {\n  __SynapseConfig: SynapseConfig\n};\n\nclass StateError extends Error {\n  constructor(s: string) {\n    super(s);\n  }\n}\n\nexport class Synapse {\n  static readonly OBSERVABLE = Observable.throw(\n    'should only use SynapseConfig.OBSERVABLE within a method annotated with @Get, @Post, @Put, @Patch or @Delete');\n\n  static readonly PROMISE = Promise.reject(\n    'should only use SynapseConfig.PROMISE within a method annotated with @Get, @Post, @Put, @Patch or @Delete');\n\n  static init(conf: SynapseConfig): void {\n    if (global.__SynapseConfig) {\n      assert(false);\n      throw new StateError('Synapse already initialized');\n    }\n\n    conf = mergeConfigs(conf, SynapseConfig.DEFAULT);\n    validateHttpBackendAdapter(conf.httpBackend);\n\n    global.__SynapseConfig = conf;\n  }\n\n  static getConfig(): SynapseConfig {\n    if (!global.__SynapseConfig) {\n      throw new StateError('Synapse not initialized');\n    }\n\n    return global.__SynapseConfig;\n  }\n\n  static teardown(): void {\n    global.__SynapseConfig = undefined;\n  }\n}\n\nexport * from './decorators/index';\nexport * from './http-backend';\nexport * from './api-config.type';\nexport * from './config.type';\nexport * from './endpoint-config.type';\nexport * from './mapper.type';\nexport * from './typed-response.model';\n"]}