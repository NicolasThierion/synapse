{"version":3,"file":"promise-converter.js","sourceRoot":"","sources":["../../../../../../src/core/decorators/promise-converters/promise-converter.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAG1C,MAAM;;;;;;IACJ,OAAO,CAAI,OAAmB;QAC5B,MAAM,CAAC,OAAO,CAAC;KAChB;;;;;IAED,MAAM,CAAC,SAAc;QACnB,uBAAM,SAAS,GAAG,UAAU,CAAC,mBAAC,SAAgB,EAAC,CAAC,IAAI,CAAC,CAAC;QAEtD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACd,uBAAM,OAAO,qBAAG,SAAyB,CAAA,CAAC;YAC1C,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;gBAClB,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;aACvB;SACF;QAED,MAAM,CAAC,SAAS,CAAC;KAClB;CACF","sourcesContent":["import { isFunction, noop } from 'lodash';\nimport { PromiseConverter } from './promise-converter-store';\n\nexport class PromiseConverterImpl implements PromiseConverter {\n  convert<T>(promise: Promise<T>): Promise <T> {\n    return promise;\n  }\n\n  accept(convertTo: any): boolean {\n    const isPromise = isFunction((convertTo as any).then);\n\n    if (isPromise) {\n      const promise = convertTo as Promise<any>;\n      if (promise.catch) {\n        (promise).catch(noop);  // 'handle' the Synapse.PROMISE error to mute chrome warning\n      }\n    }\n\n    return isPromise;\n  }\n}\n"]}