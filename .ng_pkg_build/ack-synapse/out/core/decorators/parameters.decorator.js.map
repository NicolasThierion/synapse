{"version":3,"file":"parameters.decorator.js","sourceRoot":"","sources":["../../../../../src/core/decorators/parameters.decorator.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAE1D,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AACpD,OAAO,EAAE,oBAAoB,EAAE,eAAe,EAAE,MAAM,cAAc,CAAC;;;;;;;AASrE,MAAM;IACJ,MAAM,CAAC,iBAAiB,CAAC,eAAe,EAAE,CAAC;CAC5C;;;;;AAOD,MAAM;IACJ,MAAM,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,CAAC;CAC9C;;;;;;;AAUD,MAAM,CAAC,uBAAM,OAAO,GAAG,MAAM,CAAC,GAAwB,EAAE;IACtD,MAAM,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;CAC1C,EAAE,eAAe,CAAC,CAAC;;;;;AAQpB,MAAM,CAAC,uBAAM,IAAI,GAAG,MAAM,CAAC,CAAC,SAA4C,oBAAoB,CAAC,IAAI,EAAsB,EAAE;IACvH,uBAAM,OAAO,GAAe,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACtD,WAAW,oBAAE,MAA8B,CAAA;KAC5C,CAAC,CAAC,mBAAC,MAAoB,CAAA,EAAE;QACxB,WAAW,EAAE,oBAAoB,CAAC,IAAI;KACvC,CAAC,CAAC;IAEH,MAAM,CAAC,iBAAiB,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;CAC9C,EAAE;IACD,WAAW,EAAE,oBAAoB;CAClC,CAAC,CAAC","sourcesContent":["import { SynapseApiReflect } from './synapse-api.reflect';\nimport { MapperType } from '../mapper.type';\nimport { assign, defaults, isString } from 'lodash';\nimport { ContentTypeConstants, HeaderConstants } from '../constants';\n\n// TODO support pathParam mapping\n/**\n * Use this decorator on a parameter to specify that it should be considered as a path parameter.\n * The mapped parameter should be either a string, a number or a boolean. Any other type will throw an error.\n *\n * @returns\n */\nexport function PathParam(): ParameterDecorator {\n  return SynapseApiReflect.addPathParamArg();\n}\n\n// TODO support queryParam mapping\n/**\n * Use this decorator on a parameter to specify that it should be considered as a query parameter.\n * @returns\n */\nexport function QueryParams(): ParameterDecorator {\n  return SynapseApiReflect.addQueryParamsArg();\n}\n\n// TODO add support for merge=true.\n\n/**\n * Use this decorator on a parameter to specify that it should be considered as a header.\n * The given headers will be merged with any specified global header.\n * If you use multiple {@code Headers} decorators for a method, header will be merged as well.\n * @returns\n */\nexport const Headers = assign((): ParameterDecorator  => {\n  return SynapseApiReflect.addHeadersArg();\n}, HeaderConstants);\n\n/**\n * Use this decorator on a parameter to specify that it should be considered as a body. Can be used once at most per method.\n * @returns\n */\n// TODO support for mappers\n// TODO let choice between 'form-data', 'x-www-form-urlencoded', 'raw' or 'binary'\nexport const Body = assign((params: BodyParams | ContentTypeConstants = ContentTypeConstants.JSON): ParameterDecorator => {\n  const params_: BodyParams = defaults(isString(params) ? {\n    contentType: params as ContentTypeConstants\n  } : params as BodyParams, {\n    contentType: ContentTypeConstants.JSON\n  });\n\n  return SynapseApiReflect.addBodyArg(params_);\n}, {\n  ContentType: ContentTypeConstants\n});\n\nexport interface BodyParams {\n  contentType?: ContentTypeConstants;\n  mapper?: MapperType<Object, any>;\n}\n"]}