{"version":3,"file":"synapse-api.reflect.js","sourceRoot":"","sources":["../../../../../src/core/decorators/synapse-api.reflect.ts"],"names":[],"mappings":"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","sourcesContent":["import 'reflect-metadata';\nimport { SynapseConfig } from '../config.type';\nimport { assert } from '../../utils/assert';\nimport {\n  cloneDeep,\n  isNumber\n} from 'lodash';\nimport { StateError } from '../../utils/state-error';\nimport { Synapse } from '../core';\nimport { BodyParams } from './parameters.decorator';\nimport { SynapseError } from '../../utils/synapse-error';\nimport { mergeConfigs } from '../../utils/utils';\nimport { SynapseApiConfig } from '../api-config.type';\n\nconst DECORATED_PARAMETERS_KEY = 'HttpParamDecorator';\nconst CONF_KEY = 'SynapseApiConfig';\n\nexport namespace SynapseApiReflect {\n\n  export class DecoratedArgs {\n    readonly path: number[] = [];\n    readonly query: number[] = [];\n    readonly headers: number[] = [];\n    body: {\n      index: number,\n      params: BodyParams\n    };\n  }\n\n  /**\n   * Class decorated with @SynapseApi\n   */\n  export interface SynapseApiClass {} // tslint:disable-line\n\n  export function init(classPrototype: SynapseApiClass, conf: SynapseApiConfig): void {\n    assert(classPrototype);\n    // inherits config from parent annotation\n    conf = _inheritConf(classPrototype, cloneDeep(conf));\n\n    // retrieve global config\n    const globalConf = Synapse.getConfig();\n\n    // patch it with local @SynapseApi config.\n    const conf_: SynapseConfig | SynapseApiConfig = mergeConfigs({}, conf as SynapseApiConfig, globalConf, {\n      path: ''\n    });\n    Object.freeze(conf_);\n\n    // save conf for this class.\n    Reflect.defineMetadata(CONF_KEY, conf_, classPrototype);\n  }\n\n  export function getConf(classPrototype: SynapseApiClass): SynapseApiConfig & SynapseConfig {\n    assert(classPrototype);\n    if (!hasConf(classPrototype)) {\n      throw new StateError(`no configuration found for class ${classPrototype.constructor.name}.\n      Are you sure that this type is properly decorated with \"@SynapseApi\" ?`);\n    }\n\n    return cloneDeep(Reflect.getOwnMetadata(CONF_KEY, classPrototype));\n  }\n\n  export function hasConf(classPrototype: SynapseApiClass): boolean {\n    assert(classPrototype);\n\n    return !!Reflect.getOwnMetadata(CONF_KEY, classPrototype);\n  }\n\n  export function addPathParamArg(): ParameterDecorator {\n    return (target: Object, key: string | symbol, parameterIndex: number) => {\n      _assertDecorateParameter('@PathParams', key, parameterIndex);\n      const decoratedArgs = getDecoratedArgs(target, key);\n      decoratedArgs.path.push(parameterIndex as number);\n\n      // decorators seems to process argument not always in natural order.\n      decoratedArgs.path.sort();\n    };\n  }\n\n  export function addQueryParamsArg(): ParameterDecorator {\n    return (target: Object, key: string | symbol, parameterIndex: number) => {\n      _assertDecorateParameter('@QueryParams', key, parameterIndex);\n      getDecoratedArgs(target, key).query.push(parameterIndex);\n    };\n  }\n\n  export function addHeadersArg(): ParameterDecorator {\n    return (target: Object, key: string | symbol, parameterIndex: number) => {\n      _assertDecorateParameter('@Headers', key, parameterIndex);\n      getDecoratedArgs(target, key).headers.push(parameterIndex);\n    };\n  }\n\n  export function addBodyArg(params: BodyParams): ParameterDecorator {\n    return (target: Object, key: string | symbol, parameterIndex: number) => {\n      const args = getDecoratedArgs(target, key);\n      if (args.body) {\n        throw new TypeError('Can specify only one @Body parameter per method.');\n      }\n\n      getDecoratedArgs(target, key).body = {\n        index: parameterIndex,\n        params\n      };\n    };\n  }\n\n  export function getDecoratedArgs(target: Object, key: string | symbol): DecoratedArgs {\n    let args: DecoratedArgs = Reflect.getOwnMetadata(DECORATED_PARAMETERS_KEY, target, key);\n    if (!args) {\n      args = new DecoratedArgs();\n      Reflect.defineMetadata(DECORATED_PARAMETERS_KEY, args , target, key);\n    }\n\n    return args;\n  }\n\n  export function addHandler(): void {\n    // TODO\n    throw new Error('not implemented');\n  }\n}\n\nfunction _inheritConf(classPrototype: SynapseApiReflect.SynapseApiClass,\n                      conf: SynapseApiConfig): SynapseApiConfig {\n  const parentCtor  = Object.getPrototypeOf(classPrototype).constructor;\n\n  // if parent constructor is not 'Object'\n  if (parentCtor.name !== 'Object') {\n\n    const parentConf = Reflect.getOwnMetadata(CONF_KEY, parentCtor.prototype);\n    const path = (conf.path && conf.path !== '') ? conf.path : parentConf.path;\n    conf = mergeConfigs({path}, conf, parentConf);\n  }\n\n  return conf;\n}\n\nfunction _assertDecorateParameter(decorator: string, key: string | symbol, parameterIndex: number): void {\n  if (!isNumber(parameterIndex)) {\n    throw new SynapseError(`${decorator} should decorate parameters only. (Found @Header on function ${key}})`);\n  }\n}\n"]}